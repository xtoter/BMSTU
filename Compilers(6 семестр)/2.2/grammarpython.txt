from dataclasses import dataclass
from typing import List, Union
from enum import Enum

@dataclass
class Program:
    functions: List['FunctionDef']

@dataclass
class FunctionDef:
    comment: Union['Comment', None]
    signature: 'FunctionSignature'
    statements: 'Statements'

@dataclass
class Comment:
    string: str

@dataclass
class FunctionSignature:
    funcname: str
    input_type: 'Type'
    output_type: 'Type'

@dataclass
class Type:
    address: str
    typename: Union[str, None]
    type_list: Union[List['Type'], None]

@dataclass
class Statements:
    statements: List['Statement']

@dataclass
class Statement:
    sample: 'Sample'
    expression: 'Expr'

@dataclass
class Sample:
    value: Union[str, 'Vals']

@dataclass
class Vals:
    values: List[Union[str, 'Vals']]

@dataclass
class Expr:
    value: Union['Val', 'CallExpr', 'Calculate', 'Num', 'Tuple']

@dataclass
class CallExpr:
    varname: str
    value: 'Val'

@dataclass
class Calculate:
    left_expr: 'Expr'
    operator: str
    right_expr: 'Expr'

@dataclass
class Num:
    value: int

@dataclass
class Tuple:
    values: 'ValList'

@dataclass
class ValList:
    values: List['Val']

@dataclass
class Val:
    value: Union[str, 'ValList']

@dataclass
class VariableType(Enum):
    INT = 'int'
    FLOAT = 'float'
    STRING = 'string'
    BOOL = 'bool'

