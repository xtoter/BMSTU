State 0
	0    $accept: . Program

	for non-terminal Comment: go to state 1
	for non-terminal EPS: go to state 2
	for non-terminal FunctionDef: go to state 3
	for non-terminal Program: go to state 4

State 1
	3    FunctionDef: Comment . FunctionSignature 'is' Statements 'end'

	for non-terminal FunctionSignature: go to state 6
	for non-terminal VARNAME: go to state 7

State 2
	2    Program: EPS .

	for terminal EOF: Reduce(rule=2)

State 3
	1    Program: FunctionDef . Program

	for non-terminal Comment: go to state 1
	for non-terminal EPS: go to state 2
	for non-terminal FunctionDef: go to state 3
	for non-terminal Program: go to state 8

State 4
	0    $accept: Program .

	for terminal EOF: Accept()

State 5



State 6
	3    FunctionDef: Comment FunctionSignature . 'is' Statements 'end'

	for terminal 'is': Shift(state=10)

State 7
	6    FunctionSignature: VARNAME . Type '::' Type
	9    VARNAME: VARNAME .

	for terminal Star: Shift(state=13), Reduce(rule=9) CONFLICT!!!
	for terminal 'INT': Reduce(rule=14), Reduce(rule=9) CONFLICT!!!
	for terminal '(': Reduce(rule=14), Reduce(rule=9) CONFLICT!!!
	for terminal 'FLOAT': Reduce(rule=14), Reduce(rule=9) CONFLICT!!!
	for terminal 'STRING': Reduce(rule=14), Reduce(rule=9) CONFLICT!!!

	for non-terminal Addr: go to state 11
	for non-terminal Type: go to state 12

State 8
	1    Program: FunctionDef Program .

	for terminal EOF: Reduce(rule=1)

State 9



State 10
	3    FunctionDef: Comment FunctionSignature 'is' . Statements 'end'

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal Sample: go to state 14
	for non-terminal Statement: go to state 15
	for non-terminal Statements: go to state 16
	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 18

State 11
	10   Type: Addr . '(' TypeList ')'
	11   Type: Addr . TypeName

	for terminal 'INT': Shift(state=23)
	for terminal '(': Shift(state=24)
	for terminal 'FLOAT': Shift(state=25)
	for terminal 'STRING': Shift(state=26)

	for non-terminal TypeName: go to state 22

State 12
	6    FunctionSignature: VARNAME Type . '::' Type

	for terminal '::': Shift(state=27)

State 13
	13   Addr: Star .

	for terminal 'INT': Reduce(rule=13)
	for terminal '(': Reduce(rule=13)
	for terminal 'FLOAT': Reduce(rule=13)
	for terminal 'STRING': Reduce(rule=13)

State 14
	12   Statement: Sample . '=' Expr

	for terminal '=': Shift(state=28)

State 15
	7    Statements: Statement .
	8    Statements: Statement . ';' Statements

	for terminal 'end': Reduce(rule=7)
	for terminal ';': Shift(state=29)

State 16
	3    FunctionDef: Comment FunctionSignature 'is' Statements . 'end'

	for terminal 'end': Shift(state=30)

State 17
	9    VARNAME: VARNAME .
	26   Val: VARNAME .

	for terminal 'end': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal ')': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal ',': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '*': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal ';': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '=': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '}': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal ']': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal ':': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '/': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '+': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '-': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!

State 18
	20   Sample: Val .
	30   Val: Val . ':' Val

	for terminal '=': Reduce(rule=20)
	for terminal ':': Shift(state=31)

State 19
	27   Val: '(' . Vals ')'

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal EPS: go to state 32
	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 33
	for non-terminal Vals: go to state 34
	for non-terminal Vals_: go to state 35

State 20
	28   Val: '{' . Vals '}'

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal EPS: go to state 32
	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 33
	for non-terminal Vals: go to state 36
	for non-terminal Vals_: go to state 35

State 21
	29   Val: '[' . Val ']'

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 37

State 22
	11   Type: Addr TypeName .

	for terminal 'is': Reduce(rule=11)
	for terminal '::': Reduce(rule=11)
	for terminal ')': Reduce(rule=11)
	for terminal ',': Reduce(rule=11)

State 23
	17   TypeName: 'INT' .

	for terminal 'is': Reduce(rule=17)
	for terminal '::': Reduce(rule=17)
	for terminal ')': Reduce(rule=17)
	for terminal ',': Reduce(rule=17)

State 24
	10   Type: Addr '(' . TypeList ')'

	for terminal Star: Shift(state=13)
	for terminal 'INT': Reduce(rule=14)
	for terminal '(': Reduce(rule=14)
	for terminal 'FLOAT': Reduce(rule=14)
	for terminal 'STRING': Reduce(rule=14)

	for non-terminal Addr: go to state 11
	for non-terminal Type: go to state 38
	for non-terminal TypeList: go to state 39

State 25
	18   TypeName: 'FLOAT' .

	for terminal 'is': Reduce(rule=18)
	for terminal '::': Reduce(rule=18)
	for terminal ')': Reduce(rule=18)
	for terminal ',': Reduce(rule=18)

State 26
	19   TypeName: 'STRING' .

	for terminal 'is': Reduce(rule=19)
	for terminal '::': Reduce(rule=19)
	for terminal ')': Reduce(rule=19)
	for terminal ',': Reduce(rule=19)

State 27
	6    FunctionSignature: VARNAME Type '::' . Type

	for terminal Star: Shift(state=13)
	for terminal 'INT': Reduce(rule=14)
	for terminal '(': Reduce(rule=14)
	for terminal 'FLOAT': Reduce(rule=14)
	for terminal 'STRING': Reduce(rule=14)

	for non-terminal Addr: go to state 11
	for non-terminal Type: go to state 40

State 28
	12   Statement: Sample '=' . Expr

	for terminal INT: Shift(state=49)
	for terminal '(': Shift(state=50)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal Calculate: go to state 41
	for non-terminal CallExpr: go to state 42
	for non-terminal DIGIT: go to state 43
	for non-terminal Expr: go to state 44
	for non-terminal Num: go to state 45
	for non-terminal Tuple: go to state 46
	for non-terminal VARNAME: go to state 47
	for non-terminal Val: go to state 48

State 29
	8    Statements: Statement ';' . Statements

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal Sample: go to state 14
	for non-terminal Statement: go to state 15
	for non-terminal Statements: go to state 51
	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 18

State 30
	3    FunctionDef: Comment FunctionSignature 'is' Statements 'end' .

	for terminal '@': Reduce(rule=3)

State 31
	30   Val: Val ':' . Val

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 52

State 32
	35   Vals: EPS .

	for terminal ')': Reduce(rule=35)
	for terminal '}': Reduce(rule=35)

State 33
	30   Val: Val . ':' Val
	36   Vals: Val .
	45   Vals_: Val . ',' Val
	46   Vals_: Val . ',' Vals_

	for terminal ')': Reduce(rule=36)
	for terminal ',': Shift(state=53)
	for terminal '}': Reduce(rule=36)
	for terminal ':': Shift(state=31)

State 34
	27   Val: '(' Vals . ')'

	for terminal ')': Shift(state=54)

State 35
	37   Vals: Vals_ .

	for terminal ')': Reduce(rule=37)
	for terminal '}': Reduce(rule=37)

State 36
	28   Val: '{' Vals . '}'

	for terminal '}': Shift(state=55)

State 37
	29   Val: '[' Val . ']'
	30   Val: Val . ':' Val

	for terminal ']': Shift(state=56)
	for terminal ':': Shift(state=31)

State 38
	15   TypeList: Type . ',' TypeList
	16   TypeList: Type . ',' Type

	for terminal ',': Shift(state=57)

State 39
	10   Type: Addr '(' TypeList . ')'

	for terminal ')': Shift(state=58)

State 40
	6    FunctionSignature: VARNAME Type '::' Type .

	for terminal 'is': Reduce(rule=6)

State 41
	23   Expr: Calculate .

	for terminal 'end': Reduce(rule=23)
	for terminal '*': Reduce(rule=23)
	for terminal ';': Reduce(rule=23)
	for terminal '/': Reduce(rule=23)
	for terminal '+': Reduce(rule=23)
	for terminal '-': Reduce(rule=23)

State 42
	22   Expr: CallExpr .

	for terminal 'end': Reduce(rule=22)
	for terminal '*': Reduce(rule=22)
	for terminal ';': Reduce(rule=22)
	for terminal '/': Reduce(rule=22)
	for terminal '+': Reduce(rule=22)
	for terminal '-': Reduce(rule=22)

State 43
	33   Num: DIGIT .

	for terminal 'end': Reduce(rule=33)
	for terminal '*': Reduce(rule=33)
	for terminal ';': Reduce(rule=33)
	for terminal '/': Reduce(rule=33)
	for terminal '+': Reduce(rule=33)
	for terminal '-': Reduce(rule=33)

State 44
	12   Statement: Sample '=' Expr .
	32   Calculate: Expr . Op Expr

	for terminal 'end': Reduce(rule=12)
	for terminal '*': Shift(state=60)
	for terminal ';': Reduce(rule=12)
	for terminal '/': Shift(state=61)
	for terminal '+': Shift(state=62)
	for terminal '-': Shift(state=63)

	for non-terminal Op: go to state 59

State 45
	24   Expr: Num .

	for terminal 'end': Reduce(rule=24)
	for terminal '*': Reduce(rule=24)
	for terminal ';': Reduce(rule=24)
	for terminal '/': Reduce(rule=24)
	for terminal '+': Reduce(rule=24)
	for terminal '-': Reduce(rule=24)

State 46
	25   Expr: Tuple .

	for terminal 'end': Reduce(rule=25)
	for terminal '*': Reduce(rule=25)
	for terminal ';': Reduce(rule=25)
	for terminal '/': Reduce(rule=25)
	for terminal '+': Reduce(rule=25)
	for terminal '-': Reduce(rule=25)

State 47
	9    VARNAME: VARNAME .
	26   Val: VARNAME .
	31   CallExpr: VARNAME . Val

	for terminal 'end': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '(': Shift(state=19), Reduce(rule=9) CONFLICT!!!
	for terminal '*': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal ';': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '{': Shift(state=20), Reduce(rule=9) CONFLICT!!!
	for terminal '[': Reduce(rule=9), Shift(state=21) CONFLICT!!!
	for terminal ':': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '/': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '+': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!
	for terminal '-': Reduce(rule=9), Reduce(rule=26) CONFLICT!!!

	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 64

State 48
	21   Expr: Val .
	30   Val: Val . ':' Val

	for terminal 'end': Reduce(rule=21)
	for terminal '*': Reduce(rule=21)
	for terminal ';': Reduce(rule=21)
	for terminal ':': Shift(state=31)
	for terminal '/': Reduce(rule=21)
	for terminal '+': Reduce(rule=21)
	for terminal '-': Reduce(rule=21)

State 49
	42   DIGIT: INT .

	for terminal 'end': Reduce(rule=42)
	for terminal '*': Reduce(rule=42)
	for terminal ';': Reduce(rule=42)
	for terminal '/': Reduce(rule=42)
	for terminal '+': Reduce(rule=42)
	for terminal '-': Reduce(rule=42)

State 50
	27   Val: '(' . Vals ')'
	34   Tuple: '(' . ValList ')'

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal EPS: go to state 32
	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 65
	for non-terminal ValList: go to state 66
	for non-terminal Vals: go to state 34
	for non-terminal Vals_: go to state 35

State 51
	8    Statements: Statement ';' Statements .

	for terminal 'end': Reduce(rule=8)

State 52
	30   Val: Val ':' Val .
	30   Val: Val . ':' Val

	for terminal 'end': Reduce(rule=30)
	for terminal ')': Reduce(rule=30)
	for terminal ',': Reduce(rule=30)
	for terminal '*': Reduce(rule=30)
	for terminal ';': Reduce(rule=30)
	for terminal '=': Reduce(rule=30)
	for terminal '}': Reduce(rule=30)
	for terminal ']': Reduce(rule=30)
	for terminal ':': Reduce(rule=30), Shift(state=31) CONFLICT!!!
	for terminal '/': Reduce(rule=30)
	for terminal '+': Reduce(rule=30)
	for terminal '-': Reduce(rule=30)

State 53
	45   Vals_: Val ',' . Val
	46   Vals_: Val ',' . Vals_

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 67
	for non-terminal Vals_: go to state 68

State 54
	27   Val: '(' Vals ')' .

	for terminal 'end': Reduce(rule=27)
	for terminal ')': Reduce(rule=27)
	for terminal ',': Reduce(rule=27)
	for terminal '*': Reduce(rule=27)
	for terminal ';': Reduce(rule=27)
	for terminal '=': Reduce(rule=27)
	for terminal '}': Reduce(rule=27)
	for terminal ']': Reduce(rule=27)
	for terminal ':': Reduce(rule=27)
	for terminal '/': Reduce(rule=27)
	for terminal '+': Reduce(rule=27)
	for terminal '-': Reduce(rule=27)

State 55
	28   Val: '{' Vals '}' .

	for terminal 'end': Reduce(rule=28)
	for terminal ')': Reduce(rule=28)
	for terminal ',': Reduce(rule=28)
	for terminal '*': Reduce(rule=28)
	for terminal ';': Reduce(rule=28)
	for terminal '=': Reduce(rule=28)
	for terminal '}': Reduce(rule=28)
	for terminal ']': Reduce(rule=28)
	for terminal ':': Reduce(rule=28)
	for terminal '/': Reduce(rule=28)
	for terminal '+': Reduce(rule=28)
	for terminal '-': Reduce(rule=28)

State 56
	29   Val: '[' Val ']' .

	for terminal 'end': Reduce(rule=29)
	for terminal ')': Reduce(rule=29)
	for terminal ',': Reduce(rule=29)
	for terminal '*': Reduce(rule=29)
	for terminal ';': Reduce(rule=29)
	for terminal '=': Reduce(rule=29)
	for terminal '}': Reduce(rule=29)
	for terminal ']': Reduce(rule=29)
	for terminal ':': Reduce(rule=29)
	for terminal '/': Reduce(rule=29)
	for terminal '+': Reduce(rule=29)
	for terminal '-': Reduce(rule=29)

State 57
	15   TypeList: Type ',' . TypeList
	16   TypeList: Type ',' . Type

	for terminal Star: Shift(state=13)
	for terminal 'INT': Reduce(rule=14)
	for terminal '(': Reduce(rule=14)
	for terminal 'FLOAT': Reduce(rule=14)
	for terminal 'STRING': Reduce(rule=14)

	for non-terminal Addr: go to state 11
	for non-terminal Type: go to state 69
	for non-terminal TypeList: go to state 70

State 58
	10   Type: Addr '(' TypeList ')' .

	for terminal 'is': Reduce(rule=10)
	for terminal '::': Reduce(rule=10)
	for terminal ')': Reduce(rule=10)
	for terminal ',': Reduce(rule=10)

State 59
	32   Calculate: Expr Op . Expr

	for terminal INT: Shift(state=49)
	for terminal '(': Shift(state=50)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal Calculate: go to state 41
	for non-terminal CallExpr: go to state 42
	for non-terminal DIGIT: go to state 43
	for non-terminal Expr: go to state 71
	for non-terminal Num: go to state 45
	for non-terminal Tuple: go to state 46
	for non-terminal VARNAME: go to state 47
	for non-terminal Val: go to state 48

State 60
	38   Op: '*' .

	for terminal INT: Reduce(rule=38)
	for terminal '(': Reduce(rule=38)
	for terminal '{': Reduce(rule=38)
	for terminal '[': Reduce(rule=38)

State 61
	39   Op: '/' .

	for terminal INT: Reduce(rule=39)
	for terminal '(': Reduce(rule=39)
	for terminal '{': Reduce(rule=39)
	for terminal '[': Reduce(rule=39)

State 62
	40   Op: '+' .

	for terminal INT: Reduce(rule=40)
	for terminal '(': Reduce(rule=40)
	for terminal '{': Reduce(rule=40)
	for terminal '[': Reduce(rule=40)

State 63
	41   Op: '-' .

	for terminal INT: Reduce(rule=41)
	for terminal '(': Reduce(rule=41)
	for terminal '{': Reduce(rule=41)
	for terminal '[': Reduce(rule=41)

State 64
	30   Val: Val . ':' Val
	31   CallExpr: VARNAME Val .

	for terminal 'end': Reduce(rule=31)
	for terminal '*': Reduce(rule=31)
	for terminal ';': Reduce(rule=31)
	for terminal ':': Shift(state=31)
	for terminal '/': Reduce(rule=31)
	for terminal '+': Reduce(rule=31)
	for terminal '-': Reduce(rule=31)

State 65
	30   Val: Val . ':' Val
	36   Vals: Val .
	43   ValList: Val .
	44   ValList: Val . ',' ValList
	45   Vals_: Val . ',' Val
	46   Vals_: Val . ',' Vals_

	for terminal ')': Reduce(rule=36), Reduce(rule=43) CONFLICT!!!
	for terminal ',': Shift(state=72)
	for terminal ':': Shift(state=31)

State 66
	34   Tuple: '(' ValList . ')'

	for terminal ')': Shift(state=73)

State 67
	30   Val: Val . ':' Val
	45   Vals_: Val . ',' Val
	45   Vals_: Val ',' Val .
	46   Vals_: Val . ',' Vals_

	for terminal ')': Reduce(rule=45)
	for terminal ',': Shift(state=53)
	for terminal '}': Reduce(rule=45)
	for terminal ':': Shift(state=31)

State 68
	46   Vals_: Val ',' Vals_ .

	for terminal ')': Reduce(rule=46)
	for terminal '}': Reduce(rule=46)

State 69
	15   TypeList: Type . ',' TypeList
	16   TypeList: Type ',' Type .
	16   TypeList: Type . ',' Type

	for terminal ')': Reduce(rule=16)
	for terminal ',': Shift(state=57)

State 70
	15   TypeList: Type ',' TypeList .

	for terminal ')': Reduce(rule=15)

State 71
	32   Calculate: Expr Op Expr .
	32   Calculate: Expr . Op Expr

	for terminal 'end': Reduce(rule=32)
	for terminal '*': Shift(state=60), Reduce(rule=32) CONFLICT!!!
	for terminal ';': Reduce(rule=32)
	for terminal '/': Reduce(rule=32), Shift(state=61) CONFLICT!!!
	for terminal '+': Shift(state=62), Reduce(rule=32) CONFLICT!!!
	for terminal '-': Shift(state=63), Reduce(rule=32) CONFLICT!!!

	for non-terminal Op: go to state 59

State 72
	44   ValList: Val ',' . ValList
	45   Vals_: Val ',' . Val
	46   Vals_: Val ',' . Vals_

	for terminal '(': Shift(state=19)
	for terminal '{': Shift(state=20)
	for terminal '[': Shift(state=21)

	for non-terminal VARNAME: go to state 17
	for non-terminal Val: go to state 74
	for non-terminal ValList: go to state 75
	for non-terminal Vals_: go to state 68

State 73
	34   Tuple: '(' ValList ')' .

	for terminal 'end': Reduce(rule=34)
	for terminal '*': Reduce(rule=34)
	for terminal ';': Reduce(rule=34)
	for terminal '/': Reduce(rule=34)
	for terminal '+': Reduce(rule=34)
	for terminal '-': Reduce(rule=34)

State 74
	30   Val: Val . ':' Val
	43   ValList: Val .
	44   ValList: Val . ',' ValList
	45   Vals_: Val . ',' Val
	45   Vals_: Val ',' Val .
	46   Vals_: Val . ',' Vals_

	for terminal ')': Reduce(rule=45), Reduce(rule=43) CONFLICT!!!
	for terminal ',': Shift(state=72)
	for terminal ':': Shift(state=31)

State 75
	44   ValList: Val ',' ValList .

	for terminal ')': Reduce(rule=44)

