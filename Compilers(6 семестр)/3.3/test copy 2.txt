@ Объединение двух списков
Zip (*int, *int) :: *(int, int) is
  (x : xs, y : ys) = (x, y) : Zip (xs, ys);
  (xs, ys) = {}
end

@ Декартово произведение
CartProd (*int, *int) :: *(int, int) is
  (x : xs, ys) = Append (Bind (x, ys), CartProd(xs, ys));
  ({}, ys) = {}
end

Bind (int, *int) :: *(int, int) is
  (x, {}) = {};
  (x, y : ys) = (x, y) : Bind (x, ys)
end

@ Конкатенация списков пар
Append (*(int, int), *(int, int)) :: *(int, int) is
  (x : xs, ys) = x : Append (xs, ys);
  ({}, ys) = ys
end

@ Расплющивание вложенного списка
Flat **int :: *int is
  (x : xs) : xss = x : Flat [xs : xss];
  {} : xss = Flat xss;
  {} = {}
end

@ Сумма элементов списка
Sum *int :: int is
  x : xs = x + Sum xs;
  {} = 0
end

@ Вычисление полинома по схеме Горнера
Polynom (int, *int) :: int is
  (x, {}) = 0;
  (x, coef : coefs) = Polynom (x, coefs) * x + coef
end

@ Вычисление полинома x³+x²+x+1
Polynom1111 int :: int is x = Polynom (x, {1, 1, 1, 1}) end

Cons3 (int, *int) :: *int is
  (x, xs) = x : x : x : xs
end

Match *int :: (int, int, *int) is
  x : y : rest = (x, y, rest)
end
